1. no augmentation
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[352.,   7.,   4.],
        [  7., 201.,  12.],
        [  5.,  13.,  38.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9670, 0.9095, 0.7037])
Recall         tensor([0.9697, 0.9136, 0.6786])
F1 Score       tensor([0.9684, 0.9116, 0.6909])

Test Accuracy of the model: 92.48826291079813 %

2. traditional augmentation
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[350.,   8.,   5.],
        [  3., 203.,  14.],
        [  4.,  12.,  40.]])

Per class evaluation:
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9804, 0.9103, 0.6780])
Recall         tensor([0.9642, 0.9227, 0.7143])
F1 Score       tensor([0.9722, 0.9165, 0.6957])

Test Accuracy of the model: 92.80125195618153 %

3. DCGAN
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[343.,   7.,  13.],
        [  3., 196.,  21.],
        [  3.,   9.,  44.]])

Per class evaluation:
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9828, 0.9245, 0.5641])
Recall         tensor([0.9449, 0.8909, 0.7857])
F1 Score       tensor([0.9635, 0.9074, 0.6567])

Test Accuracy of the model: 91.23630672926447 %

4.cDCGAN

-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[351.,   9.,   3.],
        [  4., 204.,  12.],
        [  6.,  11.,  39.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9723, 0.9107, 0.7222])
Recall         tensor([0.9669, 0.9273, 0.6964])
F1 Score       tensor([0.9696, 0.9189, 0.7091])

Test Accuracy of the model: 92.95774647887323 %


5. CycleGan
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[349.,   5.,   9.],
        [  3., 210.,   7.],
        [  4.,   7.,  45.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9803, 0.9459, 0.7377])
Recall         tensor([0.9614, 0.9545, 0.8036])
F1 Score       tensor([0.9708, 0.9502, 0.7692])

Test Accuracy of the model: 94.5226917057903 %

6. StarGan
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[349.,   7.,   7.],
        [  4., 202.,  14.],
        [  4.,   7.,  45.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9776, 0.9352, 0.6818])
Recall         tensor([0.9614, 0.9182, 0.8036])
F1 Score       tensor([0.9694, 0.9266, 0.7377])

Test Accuracy of the model: 93.27073552425665 %



