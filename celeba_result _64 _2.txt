1. no augmentation
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[ 92.,   4.,   4.],
        [  9., 484.,   7.],
        [ 14.,  82., 204.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.8000, 0.8491, 0.9488])
Recall         tensor([0.9200, 0.9680, 0.6800])
F1 Score       tensor([0.8558, 0.9047, 0.7922])

Test Accuracy of the model: 86.66666666666667 %



2. traditional augmentation
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[ 96.,   1.,   3.],
        [ 12., 456.,  32.],
        [ 17.,  30., 253.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.7680, 0.9363, 0.8785])
Recall         tensor([0.9600, 0.9120, 0.8433])
F1 Score       tensor([0.8533, 0.9240, 0.8605])

Test Accuracy of the model: 89.44444444444444 %



3. DCGAN
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[ 88.,   4.,   8.],
        [  4., 485.,  11.],
        [  7.,  86., 207.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.8889, 0.8435, 0.9159])
Recall         tensor([0.8800, 0.9700, 0.6900])
F1 Score       tensor([0.8844, 0.9023, 0.7871])

Test Accuracy of the model: 86.66666666666667 %


4.cDCGAN
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[ 95.,   2.,   3.],
        [ 17., 441.,  42.],
        [ 26.,  32., 242.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.6884, 0.9284, 0.8432])
Recall         tensor([0.9500, 0.8820, 0.8067])
F1 Score       tensor([0.7983, 0.9046, 0.8245])

Test Accuracy of the model: 86.44444444444444 %



5. CycleGan
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[ 95.,   1.,   4.],
        [ 15., 469.,  16.],
        [ 21.,  54., 225.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.7252, 0.8950, 0.9184])
Recall         tensor([0.9500, 0.9380, 0.7500])
F1 Score       tensor([0.8225, 0.9160, 0.8257])

Test Accuracy of the model: 87.66666666666667 %



6. StarGan
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[ 95.,   1.,   4.],
        [  8., 458.,  34.],
        [ 15.,  27., 258.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.8051, 0.9424, 0.8716])
Recall         tensor([0.9500, 0.9160, 0.8600])
F1 Score       tensor([0.8716, 0.9290, 0.8658])

Test Accuracy of the model: 90.11111111111111 %





