1. no augmentation
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[328.,  18.,  16.],
        [  6., 208.,   5.],
        [  3.,  14.,  38.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9733, 0.8667, 0.6441])
Recall         tensor([0.9061, 0.9498, 0.6909])
F1 Score       tensor([0.9385, 0.9063, 0.6667])

Test Accuracy of the model: 90.25157232704403 %


2. traditional augmentation
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[350.,   3.,   9.],
        [  6., 202.,  11.],
        [  5.,   1.,  49.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9695, 0.9806, 0.7101])
Recall         tensor([0.9669, 0.9224, 0.8909])
F1 Score       tensor([0.9682, 0.9506, 0.7903])

Test Accuracy of the model: 94.49685534591195 %


3. DCGAN
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[322.,  22.,  18.],
        [  4., 214.,   1.],
        [  0.,  14.,  41.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9877, 0.8560, 0.6833])
Recall         tensor([0.8895, 0.9772, 0.7455])
F1 Score       tensor([0.9360, 0.9126, 0.7130])

Test Accuracy of the model: 90.72327044025157 %


4.cDCGAN
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[352.,   4.,   6.],
        [ 10., 197.,  12.],
        [  6.,   3.,  46.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9565, 0.9657, 0.7188])
Recall         tensor([0.9724, 0.8995, 0.8364])
F1 Score       tensor([0.9644, 0.9314, 0.7731])

Test Accuracy of the model: 93.55345911949685 %


5. CycleGan
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[350.,   6.,   6.],
        [ 11., 205.,   3.],
        [  6.,   7.,  42.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9537, 0.9404, 0.8235])
Recall         tensor([0.9669, 0.9361, 0.7636])
F1 Score       tensor([0.9602, 0.9382, 0.7925])

Test Accuracy of the model: 93.86792452830188 %


6. StarGan
-----------------------
Evaluation on test data
-----------------------
Confusion matrix:
 tensor([[342.,   8.,  12.],
        [  6., 198.,  15.],
        [  2.,   5.,  48.]])

Per class evaluation: 
Classes        {'Black_Hair': 0, 'Blond_Hair': 1, 'Gray_Hair': 2}
Precision      tensor([0.9771, 0.9384, 0.6400])
Recall         tensor([0.9448, 0.9041, 0.8727])
F1 Score       tensor([0.9607, 0.9209, 0.7385])

Test Accuracy of the model: 92.45283018867924 %




